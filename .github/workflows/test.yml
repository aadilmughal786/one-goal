# .github/workflows/test.yml

# Name of the GitHub Actions workflow. This is displayed in the "Actions" tab of your repository.
name: Run Tests

# Defines the triggers for this workflow.
on:
  # Run the workflow on every push to the 'main' branch.
  push:
    branches: [main]
  # Run the workflow on every pull request that targets the 'main' branch.
  pull_request:
    branches: [main]
  # Allows the workflow to be run manually from the GitHub Actions UI.
  workflow_dispatch:

# Defines the jobs that will be executed as part of the workflow.
jobs:
  # A single job named 'test' in this workflow.
  test:
    # The user-friendly name for the job, displayed in the GitHub UI.
    name: Run Jest Service Tests
    # Specifies the runner environment. We'll use the latest version of Ubuntu.
    runs-on: ubuntu-latest

    # A sequence of steps that make up the 'test' job.
    steps:
      # Step 1: Check out the repository's code.
      # This action downloads a copy of your code onto the runner so the job can access it.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up the Node.js environment.
      # This action installs Node.js on the runner.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # Use Node.js version 20, which is consistent with your project's requirements.
          node-version: '20'
          # Cache Yarn dependencies to speed up future workflow runs.
          cache: 'yarn'

      # Step 3: Install project dependencies.
      # The '--frozen-lockfile' flag ensures that the exact versions of dependencies from your
      # yarn.lock file are installed, creating a reproducible build.
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Step 4: Run the Jest test suite.
      # This command executes the 'test' script defined in your package.json file,
      # which in turn runs Jest. If any test fails, this step will fail, and the workflow will stop.
      - name: Run Tests
        run: yarn test
